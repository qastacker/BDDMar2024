screenshot:

TakeScreenshot ts = ((TakeScreenshot)webdriver);
File src = ts.getScreeshotAs(OuptuTupe.FILE);
File dest = new File(filepath);
FileUtils.copyFile(src,dest);

import or export from excel:

FileInputStream fis = new FilInpStr(filepath);
XSSF Workbook wb = new WorkBook(fis);
XSSF Sheet sh = wb.getSHeetAs("sheetname");
Row row = sh.getRow(0);
Cell cell = row.getCell(0);
System.out.println(sh.getRow(0).getCell(1));

Cell cell2 = row.createCell(6);
cell.setCellValue("pass")
FileOtSTr fop = new FilOutStr(filepath);
wb.write(fop);
fop.close

ExtentReports:

public class Webtest{

WebDriver driver;
ExtentReports ext;
ExtentTest test;

public void beforeMethod(){
	driver = new ChromeDriver();
	ExtentHTMLReporter htmlrep = new ExtentHTMLReporter("newRep.html);
	extent = new ExtentReports();
	extent.attachReporter(htmlrep);	
}

public void launchBroswer(){
	extent = test.createTest("Broser test");
	driver.get("amazon.com");
	test.log(Status.INFO,"launching browser");
	//
	//
	test.log(Status.PASS," success");


}

}

Basic script for rest API

public class resAssuredTesting{

	@Test
	public void generateTokenAndPublishBooks(){

		RestAssured.baseURI = "";
		String userDet = "{"username":"user1","password":"passw"}";

		Response resp = RestAssured.given().header("Content-Type","application-json")
				.body(userDet).post("/endpoint");
		resp.getStatusCode();
		String t = resp.getBody().asString();
		JSONPath js = ReUseMethos.rawtojson();
		String token = js.get("token");

		String books = "{"userid":"",
				"collectionBooks":
				[
				   "isbn":"";
				]
			"}"
		Response resp1 = RestAssured.given()
				.header("Authorization","Bearer"+token)
				.header("Content-Type","application-json")
				.body(books).post("/endpoint");

	}

}


List = can have more null value, can have duplicate, can have order of elemnt
Set = one null vale, cannot hav duplica, no order of elemnt
Map = = one null key with many null val, no duplicate key, no order of elemnt
we cannot use Set<> in getWINDOWHandles since it handles unique window and it has unique order for windows, 
so if we use List it may have duplicate 

window handle:

String ParentWIndow = driver.switchTo().getWindowHandle();
Set<String> multiWindow = driver.getWindowHandles();
for(String win:multiWindow){
if(win.equals(ParentWIndow){
	driver.switchTo().window(win);
	 //do actions
	
	}
}


public class POJOTest{

private categoryName;
private productName;

public String getCategoryName(){
	return categoryName;
}

public void setCategoryName(String categoryName){
	this.categoryName= categoryName;
}

public String getProductName(){
	return productName;
}

public void setProductName(String productName){
	this.productName= productName;
}


}



verify link is broken or not:
public static void main(String[] args) {
        System.setProperty("webdriver.chrome.driver", "path/to/chromedriver");
        WebDriver driver = new ChromeDriver();

        // Navigate to the webpage with the links
        driver.get("https://www.example.com");

        // Find all links on the webpage
        List<WebElement> links = driver.findElements(By.tagName("a"));

        // Iterate through each link and check if it's broken
        for (WebElement link : links) {
            String url = link.getAttribute("href");
            if (url != null && !url.isEmpty()) {
                verifyLinkStatus(url);
            }
        }

        // Close the browser
        driver.quit();
    }

    public static void verifyLinkStatus(String url) {
        try {
            // Create a URL object
            URL link = new URL(url);

            // Open a connection to the URL
            HttpURLConnection httpURLConnection = (HttpURLConnection) link.openConnection();

            // Set the timeout for the connection (optional)
            httpURLConnection.setConnectTimeout(3000);

            // Connect to the URL
            httpURLConnection.connect();

            // Get the HTTP response code
            int responseCode = httpURLConnection.getResponseCode();

            // Print the response code
            System.out.println("Response code for " + url + ": " + responseCode);

            // Close the connection
            httpURLConnection.disconnect();
        } catch (Exception e) {
            // Print an error message if the link is broken
            System.out.println("Exception for " + url + ": " + e.getMessage());
        }
    }
}

find all link and frames:
WebDriver driver = new ChromeDriver();
driver.get();

List<WbEle> allLinks = driver.findElements(By.tagName("a"));
List<WbEle> allFrames = driver.findElements(By.tagName("frame"));
allFrames.addAll(driver.findElement(By.tagname("iframe")));

for(WebElement fr:allFrames){
	driver.switchTo().frame(fr);
	List<WebElemnt> framelinks = driver.findElement(By.tageName("a"));
	allLinks.addAll(framelinks);
driver.switchTo().defaultContent();	
}

for(WebEle link:allLinks){
	string url = link.getAttribute("href");
	if(url!=null && !url.isEmpty()){
		verifyURL(url);
	}
}

public void verifyURL(String url){
try{
	Url link = new Url(url);
	HttpURLConnection httpConn = (HttpURLConnection)link.openConnection();
	httpConn.setConnectionTimeout(3000);
	STring rspCode = httpConn.getStatusResponse();
	if(respCOde!=200){
		sys.out.pr("")
	}
	httpConn.disconnect();
	}catch(Exception e){
		sys.out.pr("")
	}

}

switching multiple window:

public static void main(Sting[] args){

WebDriver driver = new ChromeDriver();
driver.get();
String chooseByWindowNum = "";
String chooseByWindowTitleName = "";
getWinByNum(driver,chooseByWindowNum)
getWinByTitlNm(driver,chooseByWindowTitleName)
}

public static void getWindowByNum(WebDriver driver,String chooseByWindowNum){
	Set<String> s1 = driver.getWindowHandles();
	Iterator<String> i1 =si.iterator();
	int i=1;
	while(i1.hasNext() && i<=10){
		String window1 = i1.next().toString();
		driver.switchTo().window(window1)
		if(i==t1) break;
		i++;
	}
}

public static void getWinByTitlNm(WebDriver driver,String chooseByWindowTitleName){	
	Set<String> s2 = driver.getWIndowHandles();
	Iterator<String> i2 = s2.iterator();
	while(i2.hasNext()){
		String parentWindow1 = i2.next();
		driver.switchTo().window(parentwindow2);
		if(driver.getTitle().equals(chooseByWindowTitleName)){break;}
	}
}

Vowels:
public class MyClass {
    public static void main(String args[]) {
      String a1= "Mohammed Azharuddin";
      String a2 = "Testing Project";
      totalVowels(a1);
      totalVowelsOccurence(a2);
    }
    
    public static void totalVowels(String s1){
        
        int a[] = new int[5];
        for(char ch:s1.toCharArray()){
            if((ch =='A')||(ch =='a')){
                a[0]++;
            }else if((ch =='E')||(ch =='e')){
                a[1]++;
            }else if((ch =='I')||(ch =='i')){
                a[2]++;
            }else if((ch =='O')||(ch =='o')){
                a[3]++;
            }else if((ch =='U')||(ch =='u')){
                a[4]++;
            }
        }
        
        System.out.println("A occurence is"+a[0]);
        System.out.println("E occurence is"+a[1]);
        System.out.println("I occurence is"+a[2]);
        System.out.println("O occurence is"+a[3]);
        System.out.println("U occurence is"+a[4]);

    }
    
    public static void totalVowelsOccurence(String s2){
        
        String vow = "AaEeIiOoUu";
        int count=0;
        for(char ch:s2.toCharArray()){
            if(vow.indexOf(ch)!= -1){
                count++;
            }
        }
             System.out.println("Total vowels occurence is"+count);
  
    }
}

DataProvider using TestNG
public class testEx{

@BeforeTest 
public startBrowse(){
}

@Test(dataProvider="loginDetail")
public void LoginPage(String username,STring password){

}

@AfterTest
public tearDown(){
}

@DataProvider(name="loginDetail")
public Object[][]{
 return data;
}
}

DB Testing:
public class DBTestng{

@Test
public void DBTest(){

String url="jdbc:postgresql//www.localhost.5507/"
STring username = "";
STring password="";
String query="";
try{

	Connection connection = DriverManager.getConnection(url,username,passowrd);
	Statement statement = connection.createStatement();
	Result result = statement.executeResult(query)
	while(result.hasNext()){
		System.out.println(result.getID);
		System.out.println(result.getName);
		System.out.println(result.getAddress);
	}
	resilt.close();
	statement.close();
	connection.close();

}catch(SQLException e){
	Sys.out.pr(e.printtace());
}

}


}